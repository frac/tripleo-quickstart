- name: install libguestfs-tools
  yum: name=libguestfs-tools state=present
  become: true

- name: get MACs for the undercloud
  generate_macs:
    nodes: "{{ vms.undercloud.nodes }}"
    bridges: "{{ networks.bridges }}"
  register: undercloud_mac_map

- name: get expected md5 of undercloud appliance
  shell: curl {{ url }}.md5 | awk '{ print $1 }'
  register: undercloud_md5

- name: get undercloud appliance
  register: get_undercloud_result
  until: get_undercloud_result.msg.find('did not match') == -1
  retries: 3
  delay: 10
  get_url:
    url: '{{ url }}'
    dest: '{{ working_dir }}'
    timeout: 1200
    checksum: 'md5:{{ undercloud_md5.stdout }}'

- name: copy instackenv.json to appliance
  shell: >
         LIBGUESTFS_BACKEND=direct virt-customize --upload {{ working_dir }}/instackenv.json:/home/stack/instackenv.json -a {{ working_dir }}/undercloud.qcow2

- name: inject ssh key to appliance
  shell: >
         export LIBGUESTFS_BACKEND=direct;
         virt-customize --mkdir /root/.ssh/ -a {{ working_dir }}/undercloud.qcow2;
         cp /home/{{ non_root_user }}/.ssh/id_rsa.pub {{ working_dir }}/authorized_keys;
         chmod 600 {{ working_dir }}/authorized_keys;
         virt-customize --upload {{ working_dir }}/authorized_keys:/root/.ssh/authorized_keys -a {{ working_dir }}/undercloud.qcow2;
         virt-customize --run-command 'sudo chown root:root /root/.ssh/authorized_keys' -a {{ working_dir }}/undercloud.qcow2;

- name: Install undercloud vm storage
  shell: >
         virsh vol-create-as {{ vms.volume_pool}} {{ item.name }}.qcow2 {{ item.disk_size }}G --format qcow2;
         cp {{ working_dir }}/undercloud.qcow2 '{{ vms.volume_path }}''{{ item.name }}'.qcow2
  with_items: "{{ vms.undercloud.nodes }}"
  become: true

- name: define undercloud vm
  virt:
    name: "{{ item.name }}"
    command: define
    xml: "{{ lookup('template', 'undercloudvm.xml.j2') }}"
  with_items: "{{ vms.undercloud.nodes }}"

- name: start undercloud vm
  virt:
    name: "{{ item.name }}"
    command: start
  with_items: "{{ vms.undercloud.nodes }}"

- name: get undercloud vm ip address
  script: "scripts/get-undercloud-ip.sh {{ vms.undercloud.nodes[0].name }}"
  register: undercloud_vm_ip_result
  until: undercloud_vm_ip_result.stdout != ''
  retries: 12
  delay: 10

- name: set_fact for undercloud ip
  set_fact: "undercloud_ip={{ undercloud_vm_ip_result.stdout }}"

- name: wait until ssh is available on undercloud node
  wait_for:
    host: "{{ undercloud_ip }}"
    state: started
    port: 22
    delay: 15
    timeout: 300

- name: add undercloud host(s)
  add_host:
    name: "{{ item.name }}"
    groups: undercloud
    ansible_host: "{{ item.name }}"
    ansible_fqdn: "{{ item.name }}"
    ansible_user: root
    ansible_private_key_file: "{{ ansible_private_key_file }}"
  with_items: "{{ vms.undercloud.nodes }}"

- name: setup ssh config
  template:
    src: ssh.config.j2
    dest: "{{ working_dir }}/ssh.config.ansible"
    mode: 0755

- name: copy ssh_config back to the slave
  fetch:
    src: "{{ working_dir }}/ssh.config.ansible"
    dest: "{{ local_working_dir }}/ssh.config.ansible"
    flat: yes

- name: copy id_rsa key back to the slave
  fetch:
    src: "/home/{{ non_root_user }}/.ssh/id_rsa"
    dest: "{{ local_working_dir }}/id_rsa_virt_host"
    flat: yes

- name: copy undercloud root user authorized_keys to stack user
  shell: ssh -F {{ working_dir }}/ssh.config.ansible undercloud-from-virthost "cp /root/.ssh/authorized_keys /home/stack/.ssh/"

- name: chown authorized_keys for stack user
  shell: ssh -F {{ working_dir }}/ssh.config.ansible undercloud-from-virthost "chown stack:stack /home/stack/.ssh/authorized_keys"

- name: show instructions on how to get to the undercloud
  debug: msg="Use `ssh -F {{ local_working_dir }}/ssh.config.ansible undercloud` in order to access the undercloud"
